#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Solarportal monitoring script."""

import argparse
import asyncio
import logging
import os.path
import sys
from datetime import datetime
from datetime import timedelta

import aiohttp

import solarportal


logging.basicConfig(format='%(asctime)s:%(name)s:%(levelname)s:%(message)s',level=logging.DEBUG)
logging.getLogger('chardet.charsetprober').setLevel(logging.ERROR)
_LOGGER = logging.getLogger('solarportal-to-pvoutput')


portals = ', '.join(solarportal.PORTALS.keys())
parser = argparse.ArgumentParser(description='upnp_client')
parser.add_argument('--portal-type', required=True, help='Portal to use: ' + portals)
parser.add_argument('--portal-username', required=True, help='Username for portal')
parser.add_argument('--portal-password', required=True, help='Password for portal')
parser.add_argument('--interval', default=5, help='Interval bewteen fetches, in minutes, defaults to 5', type=int)
parser.add_argument('--once', action='store_true')
parser.add_argument('--pvoutput-api-key', required=True, help='PVOutput API key')
parser.add_argument('--pvoutput-system-id', required=True, help='PVOutput system id')
args = parser.parse_args()


def ceil_datetime(dt, delta):
    return dt + (datetime.min - dt) % delta


async def write_results(timestamp: datetime, data: solarportal.Data):
    data = {
        'd': timestamp.strftime('%Y%m%d'),
        't': timestamp.strftime('%H:%M'),
        'v1': data.energy_today * 1000,
        'v2': data.actual_power,
    }

    url = 'https://pvoutput.org/service/r2/addstatus.jsp'
    headers = {
        'X-Pvoutput-Apikey': args.pvoutput_api_key,
        'X-Pvoutput-SystemId': args.pvoutput_system_id,
        'Content-Type': 'application/x-www-form-urlencoded',
    }
    payload = '&'.join(['{}={}'.format(key, value) for key, value in data.items()])
    _LOGGER.debug('method: POST, url: %s\nheaders: %s\nbody: %s',
                  url, headers, payload)
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, data=payload.encode('utf-8')) as response:
            status_code = response.status
            body = await response.text()

            _LOGGER.debug('response: %s, %s', status_code, body)


async def do_loop(portal, token, powerstation, timestamp):
    try:
        data = await portal.async_get_data(token, powerstation)
        await write_results(timestamp, data)
        await asyncio.sleep(5)  # ensure we don't loop too soon
    except solarportal.SolarPortalError as ex:
        # get new token and try next time
        token = await portal.async_login(username=args.portal_username, password=args.portal_password)
        asyncio.sleep(5)
    except aiohttp.ClientError as exc:
        _LOGGER.debug('Caught exception: ', exc)

    return token



async def async_main():
    interval = timedelta(minutes=args.interval)

    portal_type = args.portal_type
    portal = solarportal.SolarPortal(portal_type)

    # fetch token
    token = await portal.async_login(username=args.portal_username, password=args.portal_password)
    _LOGGER.debug('Using token: %s', token)

    # fetch powerstation
    powerstations = await portal.async_get_powerstations(token)
    if not powerstations:
        print('No powerstations found')
        sys.exit(1)
    powerstation = powerstations[0]
    _LOGGER.debug('Using powerstation: %s', powerstation)

    # do it once
    if args.once:
        timestamp = datetime.now()
        await do_loop(portal, token, powerstation, timestamp)
        sys.exit(0)

    # enter loop
    while True:
        now = datetime.now()
        next_ = ceil_datetime(now, interval)
        diff = next_ - now
        _LOGGER.debug('Sleeping for %s seconds', diff.seconds)
        await asyncio.sleep(diff.seconds)

        token = await do_loop(portal, token, powerstation, next_)



if __name__ == '__main__':
    loop = asyncio.get_event_loop()

    try:
        loop.run_until_complete(async_main())
    except KeyboardInterrupt:
        pass
